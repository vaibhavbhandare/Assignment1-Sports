{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-3daaf1883e67265bc67c2b5af533c086",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport { Sport } from '../store/model/user';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  sport: auth.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectSportState = createFeatureSelector<AppState>('auth');\r\n\r\nexport default class SportState {\r\n  Sport: Array<Sport>;\r\n}\r\n\r\nexport const initializeState = (): SportState => {\r\n  return { Sport: Array<Sport>() };\r\n};\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sport",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Sport",
            "id": "interface-Sport-0a7f069ab7cf037792df3718c58de96e",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nexport interface Sport {\r\n    id?: string;\r\n    sportsTitle?: string;\r\n    description?: string;\r\n    category?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sportsTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-7f3428631bdde55bbeaae8fadb8192cd",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User, Sport } from '../model/user';\r\nimport {\r\n  AuthActionTypes, All,\r\n  LIST_SPORTS, ADD_SPORTS,\r\n  UPDATE_SPORTS,\r\n  DELETE_SPORTS,\r\n  LIST_DATA_SUCCESS,\r\n  ADD_SPORTS_SUCCESS,\r\n  DELETE_SPORTS_SUCCESS,\r\n  UPDATE_SPORTS_SUCCESS\r\n} from '../actions/auth.action';\r\n\r\nexport interface State {\r\n  // is a user authenticated?\r\n  isAuthenticated: boolean;\r\n  // if authenticated, there should be a user object\r\n  user: User | null;\r\n  // error message\r\n  errorMessage: string | null;\r\n  sports: Sport[];\r\n  added: boolean | null;\r\n  updated: boolean | null;\r\n  deleted: boolean | null;\r\n  loaded: boolean | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          username: action.payload.username,\r\n          password: action.payload.password\r\n        },\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect email and/or password.'\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          username: action.payload.username\r\n        },\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    case ADD_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case LIST_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case DELETE_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case UPDATE_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case LIST_DATA_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        sports: [...action.payload],\r\n        errorMessage: null,\r\n        loaded: true\r\n      };\r\n    }\r\n    case ADD_SPORTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'The Sport is added successfully!',\r\n        added: true\r\n      };\r\n    }\r\n    case DELETE_SPORTS_SUCCESS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case UPDATE_SPORTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'The Sport is updated successfully!',\r\n        added: true\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "added",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deleted",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loaded",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sports",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "updated",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-0a7f069ab7cf037792df3718c58de96e",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nexport interface Sport {\r\n    id?: string;\r\n    sportsTitle?: string;\r\n    description?: string;\r\n    category?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-e5b0bc6ad4d3b60732e155f34728376a",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "AddSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(ADD_SPORTS),\r\n        map((action: AddSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new AddSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(DELETE_SPORTS),\r\n        map((action: DeleteSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.deleteSportsById(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Deleted Successfully');\r\n                        return new DeleteSportSuccess();\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(LIST_SPORTS),\r\n        map((action: ListSports) => action),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.getSports().pipe(\r\n                map((data) =>\r\n                    new ListDataSuccess(data)));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((user) => {\r\n            alert('Please Enter Valid User Name and Password');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.username);\r\n            this.router.navigate(['/list', { term: true }]);\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            window.alert('You are Logout Successfully');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addLogin(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('User Added Successfully');\r\n                        return new SignUpSuccess(data);\r\n                    }\r\n                })).pipe(catchError((error) => {\r\n                    return of(new SignUpFailure({ error: 'error' }));\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(UPDATE_SPORTS),\r\n        map((action: UpdateSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.updateSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Updated Successfully');\r\n                        return new UpdateSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, map, switchMap, catchError, mergeMap } from 'rxjs/operators';\r\nimport {\r\n    AuthActionTypes,\r\n    LogIn, LogInSuccess, LogInFailure,\r\n    SignUp, SignUpSuccess, SignUpFailure, LIST_SPORTS, ListSports,\r\n    ListDataSuccess, ADD_SPORTS, AddSportsSuccess, AddSports, DeleteSportSuccess,\r\n    DELETE_SPORTS, DeleteSports, UPDATE_SPORTS, UpdateSports, UpdateSportsSuccess\r\n} from '../actions/auth.action';\r\nimport { SportsListService } from 'src/app/service/sports.service';\r\n\r\n@Injectable()\r\n\r\nexport class AuthEffects {\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private router: Router,\r\n        private sportsListService: SportsListService\r\n    ) { }\r\n\r\n    // effects go here\r\n    @Effect({ dispatch: false })\r\n    LogInSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.username);\r\n            this.router.navigate(['/list', { term: true }]);\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogInFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((user) => {\r\n            alert('Please Enter Valid User Name and Password');\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogOut: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            window.alert('You are Logout Successfully');\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: true })\r\n    SignUp: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addLogin(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('User Added Successfully');\r\n                        return new SignUpSuccess(data);\r\n                    }\r\n                })).pipe(catchError((error) => {\r\n                    return of(new SignUpFailure({ error: 'error' }));\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    ListSports: Observable<any> = this.actions.pipe(\r\n        ofType(LIST_SPORTS),\r\n        map((action: ListSports) => action),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.getSports().pipe(\r\n                map((data) =>\r\n                    new ListDataSuccess(data)));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    AddSports: Observable<any> = this.actions.pipe(\r\n        ofType(ADD_SPORTS),\r\n        map((action: AddSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new AddSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    DeleteSports: Observable<any> = this.actions.pipe(\r\n        ofType(DELETE_SPORTS),\r\n        map((action: DeleteSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.deleteSportsById(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Deleted Successfully');\r\n                        return new DeleteSportSuccess();\r\n                    }\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    UpdateSports: Observable<any> = this.actions.pipe(\r\n        ofType(UPDATE_SPORTS),\r\n        map((action: UpdateSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.updateSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Updated Successfully');\r\n                        return new UpdateSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "sportsListService",
                        "type": "SportsListService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sportsListService",
                        "type": "SportsListService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SportsListService",
            "id": "injectable-SportsListService-21af5440071f21d499ac81148d2457f2",
            "file": "src/app/service/sports.service.ts",
            "properties": [
                {
                    "name": "baseRefUrl",
                    "defaultValue": "environment.baseRefUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLogin",
                    "args": [
                        {
                            "name": "userLogin",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "userLogin",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSportsById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "updateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs';\nimport { HttpClient} from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SportsListService {\n\n  public baseRefUrl = environment.baseRefUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getSports(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'data');\n  }\n\n  addSport(sport: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'data', sport);\n  }\n\n  deleteSportsById(id: any): Observable<any> {\n    return this.http.delete(`${this.baseRefUrl}/` + 'data/' + id);\n  }\n\n  updateSport(sport: any): Observable<any> {\n    return this.http.put(`${this.baseRefUrl}/` + 'data/' + sport.id, sport);\n  }\n\n  getLoginCheck(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'login');\n  }\n\n  addLogin(userLogin: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'login', userLogin);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddSports",
            "id": "class-AddSports-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddSportsSuccess",
            "id": "class-AddSportsSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteSports",
            "id": "class-DeleteSports-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteSportSuccess",
            "id": "class-DeleteSportSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FooterElement",
            "id": "class-FooterElement-b60061620288c09a3cf7136fb742eba0",
            "file": "src/app/lit-Elements/footer.element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement, css } from 'lit-element';\r\n\r\n@customElement('footer-element')\r\n\r\nexport class FooterElement extends LitElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static get styles(): any {\r\n        return css`\r\n         p { color: white;\r\n             margin: 14px 0px 0px 410px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    render(): any {\r\n        return html`<p>@Sports Club</p>`;\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 5
            },
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "HeaderTitleElement",
            "id": "class-HeaderTitleElement-8139f047f528655fb5d5e63b78ac2376",
            "file": "src/app/lit-Elements/heading-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, css, customElement, property } from 'lit-element';\r\n\r\nconst mainColor = css`white`;\r\n@customElement('title-element')\r\n\r\nexport class HeaderTitleElement extends LitElement {\r\n\r\n    @property() name: any;\r\n\r\n    static get styles(): any {\r\n        return css`\r\n          h3 {\r\n              color: ${mainColor};\r\n              margin: 19px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    render(): any {\r\n        return html`<h3>Sports</h3>`;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "ListDataSuccess",
            "id": "class-ListDataSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListSports",
            "id": "class-ListSports-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SportState",
            "id": "class-SportState-3daaf1883e67265bc67c2b5af533c086",
            "file": "src/app/store/app.states.ts",
            "type": "class",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport { Sport } from '../store/model/user';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  sport: auth.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectSportState = createFeatureSelector<AppState>('auth');\r\n\r\nexport default class SportState {\r\n  Sport: Array<Sport>;\r\n}\r\n\r\nexport const initializeState = (): SportState => {\r\n  return { Sport: Array<Sport>() };\r\n};\r\n",
            "properties": [
                {
                    "name": "Sport",
                    "type": "Array<Sport>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateSports",
            "id": "class-UpdateSports-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateSportsSuccess",
            "id": "class-UpdateSportsSuccess-2fef946b73bf9a59d6fe794276d1dc8f",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogIn\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddSportsComponent",
            "id": "component-AddSportsComponent-1c9865685e7dcf013f6c95e6fae94a42",
            "file": "src/app/sports/add-sports/addsports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-sports",
            "styleUrls": [
                "./addsports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./addsports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addSportTitle",
                    "defaultValue": "'Add Sport'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showUpdateForm",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsData",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateSportTitle",
                    "defaultValue": "'Update Sport'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "isRegisterFormToUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../../store/app.states';\nimport { ListSports, AddSports, UpdateSports } from 'src/app/store/actions/auth.action';\n@Component({\n  selector: 'app-add-sports',\n  templateUrl: './addsports.component.html',\n  styleUrls: ['./addsports.component.css']\n})\nexport class AddSportsComponent implements OnInit {\n\n  public sportsForm: any;\n  public sportsData: Array<any>;\n  public sportsId: number;\n  public showUpdateForm: boolean;\n  public addSportTitle = 'Add Sport';\n  public updateSportTitle = 'Update Sport';\n  getState: Observable<any>;\n\n  constructor(private fb: FormBuilder,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private store: Store<AppState>) {\n\n    this.sportsForm = this.fb.group({\n      id: [0, [Validators.required]],\n      sportsTitle: ['', [Validators.required]],\n      category: ['', [Validators.required]],\n      description: ['', [Validators.required, Validators.maxLength]]\n    });\n\n    this.activatedRoute.params.subscribe(param => {\n      this.sportsId = param.id;\n    });\n\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getSports();\n    this.isRegisterFormToUpdate();\n  }\n\n  getSports(): void {\n    this.store.dispatch(new ListSports());\n    this.store.subscribe(data => {\n      if (data && data.sport && data.sport.sports) {\n        this.sportsData = data.sport.sports;\n      }\n    });\n  }\n\n  onSubmit(sport: any): void {\n    this.store.dispatch(new AddSports(sport));\n    this.store.dispatch(new ListSports());\n    this.router.navigate(['/list', { term: true}]);\n  }\n\n  isRegisterFormToUpdate(): void {\n    if (this.sportsId === undefined) {\n      this.showUpdateForm = false;\n    } else {\n      this.showUpdateForm = true;\n    }\n  }\n\n  onUpdateSport(sport: any): void {\n    this.store.dispatch(new UpdateSports(sport));\n    this.store.dispatch(new ListSports());\n    this.router.navigate(['/list', { term: true}]);\n  }\n\n  openList(): void {\n    this.router.navigate(['/list', { term: true}]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 80%;\r\n    margin-top: 50px;\r\n    margin-left: 115px;\r\n}\r\n\r\n.form {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 2px 10px 2px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n}",
                    "styleUrl": "./addsports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\" *ngIf=\"showUpdateForm == false\">\n    <div class=\"login\">\n        <p tabindex=\"0\">{{addSportTitle}}</p>\n    </div>\n    <div>\n        <form [formGroup]=\"sportsForm\" class=\"form\">\n            <label for=\"id\">ID :</label>\n            <input type=\"text\" formControlName=\"id\" id=\"id\" aria-label=\"ID\" autocomplete=\"off\">\n\n            <label for=\"sportsTitle\">Sports Title :</label>\n            <input type=\"text\" formControlName=\"sportsTitle\" placeholder=\"Enter Sport Name\" aria-label=\"Sports Title\" id=\"sportsTitle\" autocomplete=\"off\">\n\n            <label for=\"category\">Category :</label>\n            <input type=\"text\" formControlName=\"category\" placeholder=\"Individual or Team Player\" aria-label=\"Category\" id=\"category\" autocomplete=\"off\">\n\n            <label for=\"description\">Description :</label>\n            <textarea formControlName=\"description\" id=\"description\" placeholder=\"Enter Description\" aria-label=\"Description\" maxlength=\"500\" autocomplete=\"off\"></textarea>\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"onSubmit(sportsForm.value)\"\n            [disabled]=\"sportsForm.invalid\">Submit</button>\n        <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">Home</button>\n    </div>\n</div>\n<div class=\"grid-container\" *ngIf=\"showUpdateForm == true\">\n    <ng-container *ngFor=\"let param of sportsData\">\n        <ng-container *ngIf=\"param.id === sportsId\">\n            <div class=\"login\">\n                <p tabindex=\"0\">{{updateSportTitle}}</p>\n            </div>\n            <div>\n                <form [formGroup]=\"sportsForm\" class=\"form\">\n                    <label for=\"id\">ID :</label>\n                    <input type=\"text\" formControlName=\"id\" id=\"id\" aria-label=\"ID\" name=\"id\" [ngModel]=\"param.id\"\n                        autocomplete=\"off\" disabled>\n\n                    <label for=\"sportsTitle\">Sports Title :</label>\n                    <input type=\"text\" formControlName=\"sportsTitle\" id=\"sportsTitle\" aria-label=\"Sports Title\" [ngModel]=\"param.sportsTitle\"\n                         autocomplete=\"off\">\n\n                    <label for=\"category\">Category :</label>\n                    <input type=\"text\" formControlName=\"category\" id=\"category\" aria-label=\"Category\" [ngModel]=\"param.category\"\n                        autocomplete=\"off\">\n\n                    <label for=\"description\">Description :</label>\n                    <textarea formControlName=\"description\" id=\"description\" aria-label=\"Description\" [ngModel]=\"param.description\"\n                        maxlength=\"500\" autocomplete=\"off\"></textarea>\n                </form>\n            </div>\n            <div class=\"div2\">\n                <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"onUpdateSport(sportsForm.value)\"\n                    [disabled]=\"sportsForm.invalid\">Submit</button>\n                <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">Home</button>\n            </div>\n        </ng-container>\n    </ng-container>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-750efdab6cbf5efb8f4286501dcae7a6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "setMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Sports'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "receiveMode",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n\n  public title = 'Sports';\n  public setMode = false;\n\n  constructor() {\n  }\n\n  ngOnInit(): void { }\n\n  receiveMode(event): void {\n    this.setMode = event;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"setMode ? 'application-theme' : 'application'\">\n  <app-header (mode)=\"receiveMode($event)\"></app-header>\n  <router-outlet></router-outlet>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-1103f2e53023a2dc070dcf1a3953af27-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "mode",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "headerTitle",
                    "defaultValue": "'Sports'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setDark",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLoginStatus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../store/app.states';\nimport { LogOut } from '../store/actions/auth.action';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  public headerTitle = 'Sports';\n  public userLoginStatus: boolean;\n  public setDark = false;\n\n  @Output() mode = new EventEmitter<boolean>();\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private store: Store<AppState>) {\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(param => {\n      this.userLoginStatus = param.term;\n    },\n      (error) => {\n        console.log('Error in Fetching Parameter of Login API');\n      }\n    );\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  register(): void {\n    this.router.navigate(['/registermodule']);\n  }\n\n  logout(): void {\n    this.store.dispatch(new LogOut());\n    this.router.navigate(['/login']);\n  }\n\n  changeTheme(): void {\n    this.setDark = !this.setDark;\n    this.mode.emit(this.setDark);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.div1 {\r\n    background-color: lightseagreen;\r\n    display: inline-flex;\r\n    width: 100%;\r\n}\r\n\r\n.ui-button {\r\n    margin-left: 801px;\r\n}\r\n\r\n.header-button {\r\n    margin: 15px;\r\n    padding: 6px 10px 6px 10px;\r\n}\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"div1\">\n    <div>\n        <title-element tabindex=\"0\" name=\"{{headerTitle}}\"></title-element>\n    </div>\n    <div class=\"ui-button\">\n        <button\n         type=\"button\"\n         id=\"toggle-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"changeTheme()\"\n        >Toggle Theme</button>\n        <button\n         type=\"button\"\n         id=\"login-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"login()\"\n        >Log In</button>\n        <button\n         type=\"button\"\n         id=\"register-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"register()\"\n        >Sign up</button>\n        <button\n         type=\"button\"\n         id=\"logout-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"logout()\"\n        >Logout</button>\n    </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-27a3314517f620384d551c42bf997560",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispatchAction",
                    "args": [
                        {
                            "name": "credentials",
                            "type": ""
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { SportsListService } from '../service/sports.service';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../store/app.states';\nimport { LogInSuccess, LogInFailure } from '../store/actions/auth.action';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm: any;\n  public isLogin: boolean;\n\n  constructor(private fb: FormBuilder,\n              private sportsService: SportsListService,\n              private router: Router,\n              private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(credentials: any): void {\n    this.sportsService.getLoginCheck().subscribe(checklogin => {\n      if (credentials && checklogin) {\n        const login = checklogin;\n        for (let i = 0; i <= login.length - 1; i++) {\n          if (login[i].username === credentials.username) {\n            this.isLogin = true;\n            this.router.navigate(['/list', { term: true }]);\n            alert(`${credentials.username} Login Successfully`);\n            this.dispatchAction(credentials, true);\n            break;\n          } else {\n            this.isLogin = false;\n          }\n        }\n      }\n      if (this.isLogin === false) {\n        this.dispatchAction(credentials, false);\n      }\n    },\n      (error) => {\n        console.log('Error in Fetching Login API');\n      }\n    );\n  }\n\n  dispatchAction(credentials, isLogin?): void {\n    const payload = {\n      username: credentials.username,\n      password: credentials.password\n    };\n    if (isLogin) {\n      (document.getElementById('logout-button') as any).disabled = false;\n      this.store.dispatch(new LogInSuccess(payload));\n    } else {\n      (document.getElementById('logout-button') as any).disabled = true;\n      this.store.dispatch(new LogInFailure(payload));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 30%;\r\n    margin-left: 420px;\r\n    margin-top: 100px;\r\n}\r\n\r\n.form {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "sportsService",
                        "type": "SportsListService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sportsService",
                        "type": "SportsListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n    <div class=\"login\">\n        <p tabindex=\"0\">Login</p>\n    </div>\n    <div>\n        <form [formGroup]=\"loginForm\" class=\"form\">\n            <label for=\"username\">UserName :</label>\n            <input type=\"text\" formControlName=\"username\" id=\"username\"\n            placeholder=\"Please Enter Name\" aria-label=\"Username\" autocomplete=\"off\">\n\n            <label for=\"password\">Password :</label>\n            <input type=\"text\" formControlName=\"password\"\n            placeholder=\"Please Enter Password\" aria-label=\"Password\" id=\"password\" autocomplete=\"off\">\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button\n            type=\"button\"\n            class=\"button\"\n            tabindex=\"0\"\n            (click)=\"onSubmit(loginForm.value)\"\n            [disabled]=\"loginForm.invalid\"\n            aria-label=\"Submit Login Form\"\n        >Submit</button>\n        <button\n            type=\"button\"\n            class=\"button\"\n            tabindex=\"0\"\n            [routerLink]=\"['/list']\"\n            aria-label=\"Move Home Page\"\n        >Home</button>\n    </div>\n</div>\n\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-0f0fc598948626fae17a5964ff1725fa",
            "file": "src/app/register-module/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SportsData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "register",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "register",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../store/app.states';\nimport { SignUp } from '../../store/actions/auth.action';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  public registerForm: any;\n  public SportsData: any;\n\n  constructor(private fb: FormBuilder,\n              private store: Store<AppState>\n  ) {\n\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(register: any): void {\n    const payload = {\n      username: register.username,\n      password: register.password\n    };\n    this.store.dispatch(new SignUp(payload));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 30%;\r\n    margin-left: 420px;\r\n    margin-top: 100px;\r\n}\r\n\r\n.forms {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n}\r\n\r\n",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"grid-container\">\n    <div class=\"login\">\n        <p tabindex=\"0\">Sign up</p>\n    </div>\n    <div>\n        <form [formGroup]=\"registerForm\" class=\"forms\">\n            <label for=\"username\">UserName :</label>\n            <input\n              type=\"text\"\n              formControlName=\"username\"\n              name=\"username\"\n              placeholder=\"Please Enter Name\"\n              autocomplete=\"off\"\n              aria-label=\"User Name\"\n            >\n\n            <label for=\"password\">Password :</label>\n            <input\n             type=\"text\"\n             formControlName=\"password\"\n             name=\"password\"\n             placeholder=\"Please Enter Password\"\n             autocomplete=\"off\"\n             aria-label=\"Password\"\n            >\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button\n         type=\"button\"\n         class=\"button\"\n         tabindex=\"0\"\n         [disabled]=\"registerForm.invalid\"\n         (click)=\"onSubmit(registerForm.value)\"\n         aria-label=\"Add User\"\n        >Add User</button>\n        <button\n         type=\"button\"\n         class=\"button\"\n         tabindex=\"0\"\n         [routerLink]=\"['/list']\"\n         aria-label=\"Move Home Page\"\n        >Home</button>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "SportsComponent",
            "id": "component-SportsComponent-867a2f8af4ca383e66fcb8857d84ac63",
            "file": "src/app/sports/sports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SportsListService"
                }
            ],
            "selector": "app-listing-page",
            "styleUrls": [
                "./sports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginData",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableTitle",
                    "defaultValue": "'Sports Club'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLoginStatus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addSports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "deleteSports",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "updateSports",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SportsListService } from '../service/sports.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../store/app.states';\nimport { Observable } from 'rxjs';\nimport { ListSports, DeleteSports } from '../store/actions/auth.action';\n\n@Component({\n  selector: 'app-listing-page',\n  templateUrl: './sports.component.html',\n  styleUrls: ['./sports.component.css'],\n  providers: [SportsListService]\n})\n\nexport class SportsComponent implements OnInit {\n\n  public loginData: Array<any> = [];\n  public sportsData = [];\n  public userLoginStatus = false;\n  public tableTitle = 'Sports Club';\n  getState: Observable<any>;\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private store: Store<AppState> ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new ListSports());\n    this.store.subscribe(data => {\n      if (data && data.sport && data.sport.sports) {\n        this.sportsData = data.sport.sports;\n      }\n    });\n\n    this.activatedRoute.params.subscribe(param => {\n      this.userLoginStatus = param.term;\n    },\n      (error) => {\n        console.log('Error in Fetch Route Parameter');\n      }\n    );\n  }\n\n  updateSports(id: any): void {\n    this.router.navigate(['/addsports', id]);\n  }\n\n  deleteSports(id: any): void {\n    if (confirm('Are you sure to delete sport')) {\n      this.store.dispatch(new DeleteSports(id));\n      this.store.dispatch(new ListSports());\n    } else {\n    }\n  }\n\n  addSports(): void {\n    this.router.navigate(['/addsports']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\r\n    width: auto;\r\n    margin-top: 25px;\r\n    border: 1px solid black;\r\n}\r\n\r\ntable {\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n}\r\n\r\ntd, th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n    text-align: center;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #dddddd;\r\n}\r\n\r\n.heading {\r\n    background-color: lightseagreen;\r\n    padding: 6px;\r\n    margin-top: 0px;\r\n    color: white;\r\n}\r\n\r\n.button {\r\n    padding: 6px 15px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.add {\r\n    background-color: lightseagreen;\r\n    margin-top: 21px;\r\n    margin-bottom: 0px;\r\n}\r\n\r\n.table-bottom {\r\n    display: inline-flex;\r\n}\r\n\r\n.add-button {\r\n    margin-left: 646px;\r\n    padding: 6px;\r\n    padding-bottom: 4px;\r\n    margin-top: 9px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n",
                    "styleUrl": "./sports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list\">\n    <table style=\"width:100%\">\n        <caption>\n           <div>\n             <h2\n             class=\"heading\"\n             tabindex=\"0\"\n            >{{tableTitle}}</h2>\n           </div>\n        </caption>\n        <tr>\n            <th tabindex=\"0\">Sr. No.</th>\n            <th tabindex=\"0\">Sports Title</th>\n            <th tabindex=\"0\">Description</th>\n            <th tabindex=\"0\">Category</th>\n            <th tabindex=\"0\">Actions</th>\n        </tr>\n        <tr *ngFor=\"let item of sportsData\">\n            <td tabindex=\"0\">{{item.id}}</td>\n            <td tabindex=\"0\">{{item.sportsTitle}}</td>\n            <td tabindex=\"0\">{{item.description}}</td>\n            <td tabindex=\"0\">{{item.category}}</td>\n            <td tabindex=\"0\">\n                <button type=\"button\" tabindex=\"0\" aria-label=\"Update\" [disabled]=\"!userLoginStatus\" class=\"button\" (click)=\"updateSports(item.id)\">Update</button>\n                <button type=\"button\" tabindex=\"0\" aria-label=\"Delete\" [disabled]=\"!userLoginStatus\" class=\"button\" (click)=\"deleteSports(item.id)\" >Delete</button>\n            </td>\n        </tr>\n    </table>\n    <div class=\"add\">\n        <div class=\"table-bottom\">\n            <button type=\"button\" tabindex=\"0\" aria-label=\"Add Sport\" class=\"add-button\"  [disabled]=\"!userLoginStatus\" (click)=\"addSports()\">Add Sport</button>\n            <footer-element></footer-element>\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddSportsComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SportsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModules",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RegisterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Add sport'"
            },
            {
                "name": "ADD_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Add sport success'"
            },
            {
                "name": "DELETE_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Delete sport'"
            },
            {
                "name": "DELETE_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Delete sport success'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000'\n}"
            },
            {
                "name": "initializeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "(): SportState => {\r\n  return { Sport: Array<Sport>() };\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] List Success'"
            },
            {
                "name": "LIST_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Fetch sport'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/lit-Elements/heading-element.ts",
                "type": "",
                "defaultValue": "css`white`"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectSportState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "UPDATE_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Update sport'"
            },
            {
                "name": "UPDATE_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Update sport success'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListSports | ListDataSuccess | AddSports | AddSportsSuccess | UpdateSports | UpdateSportsSuccess | DeleteSports | DeleteSportSuccess",
                "file": "src/app/store/actions/auth.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Sighup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Sighup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Sighup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.action.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "ADD_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Add sport'"
                },
                {
                    "name": "ADD_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Add sport success'"
                },
                {
                    "name": "DELETE_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Delete sport'"
                },
                {
                    "name": "DELETE_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Delete sport success'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] List Success'"
                },
                {
                    "name": "LIST_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Fetch sport'"
                },
                {
                    "name": "UPDATE_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Update sport'"
                },
                {
                    "name": "UPDATE_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Update sport success'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000'\n}"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "initializeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "(): SportState => {\r\n  return { Sport: Array<Sport>() };\r\n}"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectSportState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/lit-Elements/heading-element.ts": [
                {
                    "name": "mainColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/lit-Elements/heading-element.ts",
                    "type": "",
                    "defaultValue": "css`white`"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Sighup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Sighup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Sighup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.action.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListSports | ListDataSuccess | AddSports | AddSportsSuccess | UpdateSports | UpdateSportsSuccess | DeleteSports | DeleteSportSuccess",
                    "file": "src/app/store/actions/auth.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "list",
                        "component": "SportsComponent"
                    },
                    {
                        "path": "addsports",
                        "component": "AddSportsComponent"
                    },
                    {
                        "path": "addsports/:id",
                        "component": "AddSportsComponent"
                    },
                    {
                        "path": "registermodule",
                        "loadChildren": "../app/register-module/register-module.module#RegisterModules",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/register-module/register-module-routing.module.ts",
                                        "module": "RegisterModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RegisterComponent",
                                                "canDeactivate": [
                                                    "AuthGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RegisterModules"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "/list",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/footer.element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FooterElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/heading-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderTitleElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/heading-element.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sports.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SportsListService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/add-sports/addsports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/sports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSportsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSportSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListSports",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateSportsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SportState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSportState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Sport",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}