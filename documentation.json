{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-aa867ca61477c772542bec648c062dde",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport { Sport } from '../store/model/user';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  sport: auth.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectSportState = createFeatureSelector<AppState>('auth');\r\n\r\nexport default class SportState {\r\n  Sport: Array<Sport>;\r\n}\r\n\r\n// export const initializeState = (): SportState => {\r\n//   return { Sport: Array<Sport>() };\r\n// };\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sport",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISportsList",
            "id": "interface-ISportsList-096f2f35b5f8d8fe77647c4900e7c1cc",
            "file": "src/app/service/sports.service.interface.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ISportsList\r\n{\r\n    getSports(): Observable<any>;\r\n\r\n    addSport(sport: any): Observable<any>;\r\n\r\n    deleteSportsById(id: any): Observable<any>;\r\n\r\n    updateSport(sport: any): Observable<any>;\r\n\r\n    getLoginCheck(): Observable<any>;\r\n\r\n    addLogin(userLogin: any): Observable<any>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "addLogin",
                    "args": [
                        {
                            "name": "userLogin",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userLogin",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSportsById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "updateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Sport",
            "id": "interface-Sport-0a7f069ab7cf037792df3718c58de96e",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nexport interface Sport {\r\n    id?: string;\r\n    sportsTitle?: string;\r\n    description?: string;\r\n    category?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sportsTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-7c89accfb1171190b909387509e9de3a",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User, Sport } from '../model/user';\r\nimport {\r\n  AuthActionTypes, All,\r\n  LIST_SPORTS, ADD_SPORTS,\r\n  UPDATE_SPORTS,\r\n  DELETE_SPORTS,\r\n  LIST_DATA_SUCCESS,\r\n  ADD_SPORTS_SUCCESS,\r\n  DELETE_SPORTS_SUCCESS,\r\n  UPDATE_SPORTS_SUCCESS,\r\n} from '../actions/auth.action';\r\n\r\nexport interface State {\r\n  // is a user authenticated?\r\n  isAuthenticated: boolean;\r\n  // if authenticated, there should be a user object\r\n  user: User | null;\r\n  // error message\r\n  errorMessage: string | null;\r\n  sports: Sport[];\r\n  added: boolean | null;\r\n  updated: boolean | null;\r\n  deleted: boolean | null;\r\n  loaded: boolean | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          username: action.payload.username,\r\n          password: action.payload.password\r\n        },\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect email and/or password.'\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: {\r\n          username: action.payload.username\r\n        },\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'The user is already Registered.',\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    case ADD_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case LIST_SPORTS: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case DELETE_SPORTS: {\r\n      return {\r\n        isAuthenticated: true,\r\n        ...state\r\n      };\r\n    }\r\n    case UPDATE_SPORTS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case LIST_DATA_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        sports: [...action.payload],\r\n        errorMessage: null,\r\n        loaded: true\r\n      };\r\n    }\r\n    case ADD_SPORTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        sports: [...action.payload],\r\n        errorMessage: null,\r\n        loaded: true\r\n      };\r\n    }\r\n    case UPDATE_SPORTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n       // sports: [...action.payload],\r\n        errorMessage: 'The Sport is updated successfully!',\r\n        loaded: true\r\n      };\r\n    }\r\n    case DELETE_SPORTS_SUCCESS: {\r\n      return {\r\n        isAuthenticated: true,\r\n        ...state\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "added",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deleted",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loaded",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sports",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "updated",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-0a7f069ab7cf037792df3718c58de96e",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nexport interface Sport {\r\n    id?: string;\r\n    sportsTitle?: string;\r\n    description?: string;\r\n    category?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-72acd33b42ed663ee7d91eda6226e209",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "AddSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(ADD_SPORTS),\r\n        map((action: AddSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Added Successfully');\r\n                        return new AddSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(DELETE_SPORTS),\r\n        map((action: DeleteSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.deleteSportsById(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Deleted Successfully');\r\n                        return new DeleteSportSuccess();\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(LIST_SPORTS),\r\n        map((action: ListSports) => action),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.getSports().pipe(\r\n                map((data) =>\r\n                    new ListDataSuccess(data)));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n      ofType(AuthActionTypes.LOGIN),\r\n      map((action: LogIn) => action.payload),\r\n      switchMap((payload) => {\r\n        return this.sportsListService.getLoginCheck().pipe(\r\n          map((user) => {\r\n            if (user.length > 0) {\r\n              return new LogInSuccess(payload);\r\n            } else {\r\n              return new LogInFailure({ error: 'Invalid credentials' });\r\n            }\r\n          })\r\n        );\r\n      })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((user) => {\r\n            window.alert('Invalid Credentials');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.username);\r\n            this.router.navigate(['/list']);\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            localStorage.removeItem('token');\r\n            window.alert('You are Logout Successfully');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addLogin(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('User Added Successfully');\r\n                        return new SignUpSuccess(data);\r\n                    }\r\n                })).pipe(catchError((error) => {\r\n                    return of(new SignUpFailure({ error: 'error' }));\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n        tap((user) => { })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>TODO: Combine signupFailure and login failure to create a single effect</p>\n",
                    "line": 98,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('user', user.payload);\r\n            window.alert('Registered successfully');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "UpdateSports",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(UPDATE_SPORTS),\r\n        map((action: UpdateSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.updateSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Updated Successfully');\r\n                        return new UpdateSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, map, switchMap, catchError, mergeMap } from 'rxjs/operators';\r\nimport {\r\n    AuthActionTypes,\r\n    LogInSuccess, LogInFailure,\r\n    SignUp, SignUpSuccess, SignUpFailure, LIST_SPORTS, ListSports,\r\n    ListDataSuccess, ADD_SPORTS, AddSportsSuccess, AddSports, DeleteSportSuccess,\r\n    DELETE_SPORTS, DeleteSports, UPDATE_SPORTS, UpdateSports, UpdateSportsSuccess, LogIn\r\n} from '../actions/auth.action';\r\nimport { SportsListService } from 'src/app/service/sports.service';\r\n\r\n@Injectable()\r\n\r\nexport class AuthEffects {\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private router: Router,\r\n        private sportsListService: SportsListService\r\n    ) { }\r\n\r\n    // effects go here\r\n    @Effect()\r\n    LogIn: Observable<any> = this.actions.pipe(\r\n      ofType(AuthActionTypes.LOGIN),\r\n      map((action: LogIn) => action.payload),\r\n      switchMap((payload) => {\r\n        return this.sportsListService.getLoginCheck().pipe(\r\n          map((user) => {\r\n            if (user.length > 0) {\r\n              return new LogInSuccess(payload);\r\n            } else {\r\n              return new LogInFailure({ error: 'Invalid credentials' });\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogInSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.username);\r\n            this.router.navigate(['/list']);\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogInFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((user) => {\r\n            window.alert('Invalid Credentials');\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogOut: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            localStorage.removeItem('token');\r\n            window.alert('You are Logout Successfully');\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: true })\r\n    SignUp: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addLogin(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('User Added Successfully');\r\n                        return new SignUpSuccess(data);\r\n                    }\r\n                })).pipe(catchError((error) => {\r\n                    return of(new SignUpFailure({ error: 'error' }));\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: false })\r\n    SignUpSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('user', user.payload);\r\n            window.alert('Registered successfully');\r\n        })\r\n    );\r\n    /**\r\n     * TODO: Combine signupFailure and login failure to create a single effect\r\n     */\r\n    @Effect({ dispatch: false })\r\n    SignUpFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n        tap((user) => { })\r\n    );\r\n\r\n    @Effect({ dispatch: true })\r\n    ListSports: Observable<any> = this.actions.pipe(\r\n        ofType(LIST_SPORTS),\r\n        map((action: ListSports) => action),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.getSports().pipe(\r\n                map((data) =>\r\n                    new ListDataSuccess(data)));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    AddSports: Observable<any> = this.actions.pipe(\r\n        ofType(ADD_SPORTS),\r\n        map((action: AddSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.addSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Added Successfully');\r\n                        return new AddSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    DeleteSports: Observable<any> = this.actions.pipe(\r\n        ofType(DELETE_SPORTS),\r\n        map((action: DeleteSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.deleteSportsById(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Deleted Successfully');\r\n                        return new DeleteSportSuccess();\r\n                    }\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    UpdateSports: Observable<any> = this.actions.pipe(\r\n        ofType(UPDATE_SPORTS),\r\n        map((action: UpdateSports) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.sportsListService.updateSport(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        window.alert('Sport Updated Successfully');\r\n                        return new UpdateSportsSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "sportsListService",
                        "type": "SportsListService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sportsListService",
                        "type": "SportsListService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SportsListService",
            "id": "injectable-SportsListService-d912da4079d56b6c691b893b3121eea9",
            "file": "src/app/service/mock.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addLogin",
                    "args": [
                        {
                            "name": "userLogin",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "userLogin",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSportsById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "updateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ISportsList } from './sports.service.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class SportsListService implements ISportsList {\r\n\r\n    addSport(sport: any): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '4',\r\n                sportsTitle: 'Football',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Team Sports'\r\n            }]);\r\n    }\r\n\r\n    deleteSportsById(id: any): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '1',\r\n                sportsTitle: 'Football',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Team Sports'\r\n            }]);\r\n    }\r\n\r\n    updateSport(sport: any): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '1',\r\n                sportsTitle: 'wrestling and martial arts',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Dual Sports'\r\n            },\r\n            {\r\n                id: '2',\r\n                sportsTitle: 'martial arts',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Dual Sports'\r\n            },\r\n            {\r\n                id: '3',\r\n                sportsTitle: 'cricket',\r\n                description: 'This is favorite ',\r\n                category: 'Team Sports'\r\n            }\r\n        ]);\r\n    }\r\n\r\n    getLoginCheck(): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '1',\r\n                username: 'admin',\r\n                password: 'admin'\r\n            },\r\n            {\r\n                username: 'admin1',\r\n                password: 'admin1',\r\n                id: 'Pwns4OZ'\r\n            }\r\n        ]);\r\n    }\r\n\r\n    addLogin(userLogin: any): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '3',\r\n                username: 'admin5',\r\n                password: 'admin5'\r\n            }\r\n        ]);\r\n    }\r\n\r\n    getSports(): Observable<any> {\r\n        return of([\r\n            {\r\n                id: '1',\r\n                sportsTitle: 'wrestling and martial arts',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Dual Sports'\r\n            },\r\n            {\r\n                id: '2',\r\n                sportsTitle: 'martial arts',\r\n                description: 'is an ancient martial arts style of fighting',\r\n                category: 'Dual Sports'\r\n            },\r\n            {\r\n                id: '3',\r\n                sportsTitle: 'cricket',\r\n                description: 'This is favorite ',\r\n                category: 'Team Sports'\r\n            }\r\n        ]);\r\n    }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "SportsListService",
            "id": "injectable-SportsListService-a0c5dd13a207e1ed74ff56ba79b58958-1",
            "file": "src/app/service/sports.service.ts",
            "properties": [
                {
                    "name": "baseRefUrl",
                    "defaultValue": "environment.baseRefUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLogin",
                    "args": [
                        {
                            "name": "userLogin",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "userLogin",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSportsById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { ISportsList } from './sports.service.interface';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SportsListService implements ISportsList {\n\n  public baseRefUrl = environment.baseRefUrl;\n  public httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  constructor(private http: HttpClient) { }\n\n  getSports(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'data', this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  addSport(sport: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'data', sport, this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  deleteSportsById(id: any): Observable<any> {\n    return this.http.delete(`${this.baseRefUrl}/` + 'data/' + id, this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  updateSport(sport: any): Observable<any> {\n    return this.http.put(`${this.baseRefUrl}/` + 'data/' + sport.id, sport, this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  getLoginCheck(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'login', this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  addLogin(userLogin: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'login', userLogin, this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'Unknown error!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SportsListService-1"
        }
    ],
    "classes": [
        {
            "name": "AddSports",
            "id": "class-AddSports-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddSportsSuccess",
            "id": "class-AddSportsSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteSports",
            "id": "class-DeleteSports-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": ""
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteSportSuccess",
            "id": "class-DeleteSportSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FooterElement",
            "id": "class-FooterElement-dd1b51ca3503412f6bbbc78e70756118",
            "file": "src/app/lit-Elements/footer.element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement, css } from 'lit-element';\r\n\r\n@customElement('footer-element')\r\n\r\nexport class FooterElement extends LitElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static get styles(): any {\r\n        return css`\r\n         p { color: white;\r\n             margin: 5px 0px 5px 581px;\r\n            }\r\n            @media only screen and (max-width: 1125px) {\r\n                p { color: white;\r\n                    margin: 0px 0px 0px calc(100vw/2 + 1px)!important;\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    render(): any {\r\n        return html`<p>@Sports Club</p>`;\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 5
            },
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "HeaderTitleElement",
            "id": "class-HeaderTitleElement-1eb7df3e29a7c96920230759168bd355",
            "file": "src/app/lit-Elements/heading-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, css, customElement, property } from 'lit-element';\r\n\r\nconst mainColor = css`white`;\r\n@customElement('title-element')\r\n\r\nexport class HeaderTitleElement extends LitElement {\r\n\r\n    @property() name: any;\r\n\r\n    static get styles(): any {\r\n        return css`\r\n          h3 {\r\n              color: ${mainColor};\r\n              margin: 19px;\r\n            }\r\n            @media only screen and (max-width: 760px) {\r\n                h3 {\r\n                    color: ${mainColor};\r\n                    margin: 9px;\r\n                  }\r\n            }\r\n        `;\r\n    }\r\n\r\n    render(): any {\r\n        return html`<h3>Sports</h3>`;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "ListDataSuccess",
            "id": "class-ListDataSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListSports",
            "id": "class-ListSports-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SportState",
            "id": "class-SportState-aa867ca61477c772542bec648c062dde",
            "file": "src/app/store/app.states.ts",
            "type": "class",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport { Sport } from '../store/model/user';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  sport: auth.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectSportState = createFeatureSelector<AppState>('auth');\r\n\r\nexport default class SportState {\r\n  Sport: Array<Sport>;\r\n}\r\n\r\n// export const initializeState = (): SportState => {\r\n//   return { Sport: Array<Sport>() };\r\n// };\r\n",
            "properties": [
                {
                    "name": "Sport",
                    "type": "Array<Sport>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateSports",
            "id": "class-UpdateSports-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_SPORTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateSportsSuccess",
            "id": "class-UpdateSportsSuccess-322fc8f59aa29f5f1c318103320e3621",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Sport } from '../model/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Sighup',\r\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\r\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\r\n  LOGOUT = '[Auth] Logout'\r\n}\r\n\r\nexport const LIST_SPORTS = '[Sports] Fetch sport';\r\nexport const ADD_SPORTS = '[Sports] Add sport';\r\nexport const UPDATE_SPORTS = '[Sports] Update sport';\r\nexport const DELETE_SPORTS = '[Sports] Delete sport';\r\nexport const LIST_DATA_SUCCESS = '[Sports] List Success';\r\nexport const ADD_SPORTS_SUCCESS = '[Sports] Add sport success';\r\nexport const DELETE_SPORTS_SUCCESS = '[Sports] Delete sport success';\r\nexport const UPDATE_SPORTS_SUCCESS = '[Sports] Update sport success';\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class ListSports implements Action {\r\n  readonly type = LIST_SPORTS;\r\n}\r\n\r\nexport class ListDataSuccess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSports implements Action {\r\n  readonly type = ADD_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class AddSportsSuccess implements Action {\r\n  readonly type = ADD_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSports implements Action {\r\n  readonly type = UPDATE_SPORTS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class UpdateSportsSuccess implements Action {\r\n  readonly type = UPDATE_SPORTS_SUCCESS;\r\n  constructor(public payload: Sport[]) {}\r\n}\r\n\r\nexport class DeleteSports implements Action {\r\n  readonly type = DELETE_SPORTS;\r\n  constructor(public payload) {}\r\n}\r\n\r\nexport class DeleteSportSuccess implements Action {\r\n  readonly type = DELETE_SPORTS_SUCCESS;\r\n}\r\n\r\nexport type All =\r\n    | LogInSuccess\r\n    | LogInFailure\r\n    | SignUp\r\n    | SignUpSuccess\r\n    | SignUpFailure\r\n    | LogOut\r\n    | ListSports\r\n    | ListDataSuccess\r\n    | AddSports\r\n    | AddSportsSuccess\r\n    | UpdateSports\r\n    | UpdateSportsSuccess\r\n    | DeleteSports\r\n    | DeleteSportSuccess;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Sport[]"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Sport[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Sport[]",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_SPORTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddSportsComponent",
            "id": "component-AddSportsComponent-dc6f2275e5eb2ca587032831cb483f58",
            "file": "src/app/sports/add-sports/addsports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-sports",
            "styleUrls": [
                "./addsports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./addsports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addSportTitle",
                    "defaultValue": "'Add Sport'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showUpdateForm",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsData",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateSportTitle",
                    "defaultValue": "'Update Sport'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getSports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "isRegisterFormToUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateSport",
                    "args": [
                        {
                            "name": "sport",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "sport",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, selectAuthState } from '../../store/app.states';\r\nimport { ListSports, AddSports, UpdateSports } from 'src/app/store/actions/auth.action';\r\n@Component({\r\n  selector: 'app-add-sports',\r\n  templateUrl: './addsports.component.html',\r\n  styleUrls: ['./addsports.component.css']\r\n})\r\nexport class AddSportsComponent implements OnInit {\r\n\r\n  public sportsForm: any;\r\n  public sportsData: Array<any>;\r\n  public sportsId: number;\r\n  public showUpdateForm: boolean;\r\n  public addSportTitle = 'Add Sport';\r\n  public updateSportTitle = 'Update Sport';\r\n  getState: Observable<any>;\r\n\r\n  constructor(private fb: FormBuilder,\r\n              private router: Router,\r\n              private activatedRoute: ActivatedRoute,\r\n              private store: Store<AppState>) {\r\n\r\n    this.sportsForm = this.fb.group({\r\n      id: [0, [Validators.required]],\r\n      sportsTitle: ['', [Validators.required]],\r\n      category: ['', [Validators.required]],\r\n      description: ['', [Validators.required, Validators.maxLength]]\r\n    });\r\n\r\n    this.activatedRoute.params.subscribe(param => {\r\n      this.sportsId = param.id;\r\n    });\r\n\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getSports();\r\n    this.isRegisterFormToUpdate();\r\n  }\r\n\r\n  getSports(): void {\r\n    this.store.dispatch(new ListSports());\r\n    this.store.subscribe(data => {\r\n      if (data && data.sport && data.sport.sports) {\r\n        this.sportsData = data.sport.sports;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit(sport: any): void {\r\n    this.store.dispatch(new AddSports(sport));\r\n    this.store.dispatch(new ListSports());\r\n    this.router.navigate(['/list']);\r\n  }\r\n\r\n  isRegisterFormToUpdate(): void {\r\n    if (this.sportsId === undefined) {\r\n      this.showUpdateForm = false;\r\n    } else {\r\n      this.showUpdateForm = true;\r\n    }\r\n  }\r\n\r\n  onUpdateSport(sport: any): void {\r\n    this.store.dispatch(new UpdateSports(sport));\r\n   // this.store.dispatch(new ListSports());\r\n   // this.router.navigate(['/list']);\r\n  }\r\n\r\n  openList(): void {\r\n    this.router.navigate(['/list']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 80%;\r\n    margin-top: 50px;\r\n    margin-left: 115px;\r\n    padding-bottom: 250px;\r\n}\r\n\r\n.form {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 2px 10px 2px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n    color: white;\r\n}",
                    "styleUrl": "./addsports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\" *ngIf=\"showUpdateForm == false\">\n    <div class=\"login\">\n        <p tabindex=\"0\">{{addSportTitle}}</p>\n    </div>\n    <div>\n        <form [formGroup]=\"sportsForm\" class=\"form\">\n            <label for=\"id\">ID :</label>\n            <input type=\"text\" formControlName=\"id\" id=\"id\" aria-label=\"ID\" autocomplete=\"off\">\n\n            <label for=\"sportsTitle\">Sports Title :</label>\n            <input type=\"text\" formControlName=\"sportsTitle\" placeholder=\"Enter Sport Name\" aria-label=\"Sports Title\" id=\"sportsTitle\" autocomplete=\"off\">\n\n            <label for=\"category\">Category :</label>\n            <input type=\"text\" formControlName=\"category\" placeholder=\"Individual or Team Player\" aria-label=\"Category\" id=\"category\" autocomplete=\"off\">\n\n            <label for=\"description\">Description :</label>\n            <textarea formControlName=\"description\" id=\"description\" placeholder=\"Enter Description\" aria-label=\"Description\" maxlength=\"500\" autocomplete=\"off\"></textarea>\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"onSubmit(sportsForm.value)\"\n            [disabled]=\"sportsForm.invalid\">Submit</button>\n        <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">Home</button>\n    </div>\n</div>\n<div class=\"grid-container\" *ngIf=\"showUpdateForm == true\">\n    <ng-container *ngFor=\"let param of sportsData\">\n        <ng-container *ngIf=\"param.id === sportsId\">\n            <div class=\"login\">\n                <p tabindex=\"0\">{{updateSportTitle}}</p>\n            </div>\n            <div>\n                <form [formGroup]=\"sportsForm\" class=\"form\">\n                    <label for=\"id\">ID :</label>\n                    <input type=\"text\" formControlName=\"id\" id=\"id\" aria-label=\"ID\" name=\"id\" [ngModel]=\"param.id\"\n                        autocomplete=\"off\" disabled>\n\n                    <label for=\"sportsTitle\">Sports Title :</label>\n                    <input type=\"text\" formControlName=\"sportsTitle\" id=\"sportsTitle\" aria-label=\"Sports Title\" [ngModel]=\"param.sportsTitle\"\n                         autocomplete=\"off\">\n\n                    <label for=\"category\">Category :</label>\n                    <input type=\"text\" formControlName=\"category\" id=\"category\" aria-label=\"Category\" [ngModel]=\"param.category\"\n                        autocomplete=\"off\">\n\n                    <label for=\"description\">Description :</label>\n                    <textarea formControlName=\"description\" id=\"description\" aria-label=\"Description\" [ngModel]=\"param.description\"\n                        maxlength=\"500\" autocomplete=\"off\"></textarea>\n                </form>\n            </div>\n            <div class=\"div2\">\n                <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"onUpdateSport(sportsForm.value)\"\n                    [disabled]=\"sportsForm.invalid\">Submit</button>\n                <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">Home</button>\n            </div>\n        </ng-container>\n    </ng-container>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ab914685fd0a66ca85f76650e40eb05a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "setMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Sports'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "receiveMode",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n\n  public title = 'Sports';\n  public setMode = false;\n\n  constructor() { }\n\n  receiveMode(event): void {\n    this.setMode = event;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div [ngClass]=\"setMode ? 'application-theme' : 'application'\">\r\n  <app-header (mode)=\"receiveMode($event)\"></app-header>\r\n  <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0db6d45f61b79df1f9a36a12f1c15f31",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "mode",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "headerTitle",
                    "defaultValue": "'Sports'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setDark",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLoginStatus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../store/app.states';\nimport { LogOut } from '../store/actions/auth.action';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  public headerTitle = 'Sports';\n  public userLoginStatus: boolean;\n  public setDark = false;\n  public getState: Observable<any>;\n  public isAuthenticated;\n\n  @Output() mode = new EventEmitter<boolean>();\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private store: Store<AppState>\n              )\n  { this.getState = this.store.select(selectAuthState); }\n\n  ngOnInit(): void {\n    this.getState.subscribe(isLogin => {\n      console.log(isLogin);\n      this.isAuthenticated = isLogin.isAuthenticated;\n    });\n\n    // this.activatedRoute.params.subscribe(param => {\n    //   this.userLoginStatus = param.term;\n    // },\n    //   (error) => {\n    //     console.log('Error in Fetching Parameter of Login API');\n    //   }\n    // );\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  register(): void {\n    this.router.navigate(['/registermodule']);\n  }\n\n  logout(): void {\n    this.store.dispatch(new LogOut());\n    this.router.navigate(['/login']);\n  }\n\n  changeTheme(): void {\n    this.setDark = !this.setDark;\n    this.mode.emit(this.setDark);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.div1 {\r\n    background-color: lightseagreen;\r\n    display: inline-flex;\r\n    width: 100%;\r\n}\r\n\r\n.ui-button {\r\n    margin-left: 801px;\r\n}\r\n\r\n.header-button {\r\n    margin: 15px;\r\n    padding: 6px 10px 6px 10px;\r\n}\r\n\r\n@media only screen and (max-width: 1165px) {\r\n    .ui-button {\r\n        margin-left: auto;\r\n        padding-bottom: 9px;\r\n        padding-top: 3px;\r\n    }\r\n\r\n    .header-button {\r\n        margin: 3px;\r\n        margin-top: 6px;\r\n        padding-left: 1px;\r\n        padding-right: 1px;\r\n    }\r\n  }\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"div1\">\n    <div>\n        <title-element tabindex=\"0\" name=\"{{headerTitle}}\"></title-element>\n    </div>\n    <div class=\"ui-button\">\n        <button\n         type=\"button\"\n         id=\"toggle-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"changeTheme()\"\n        >Toggle Theme</button>\n        <button\n         type=\"button\"\n         id=\"login-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"login()\"\n         *ngIf=\"!isAuthenticated\"\n        >Log In</button>\n        <button\n         type=\"button\"\n         id=\"register-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"register()\"\n         *ngIf=\"!isAuthenticated\"\n        >Sign up</button>\n        <button\n         type=\"button\"\n         id=\"logout-button\"\n         class=\"header-button\"\n         tabindex=\"0\"\n         (click)=\"logout()\"\n         *ngIf=\"isAuthenticated\"\n        >Logout</button>\n    </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-f8d68ef3daf8f1efe0480365c316da94",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispatchAction",
                    "args": [
                        {
                            "name": "credentials",
                            "type": ""
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { SportsListService } from '../service/sports.service';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../store/app.states';\nimport { LogInSuccess, LogInFailure } from '../store/actions/auth.action';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm: any;\n  public isLogin: boolean;\n\n  constructor(private fb: FormBuilder,\n              private sportsService: SportsListService,\n              private router: Router,\n              private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(credentials: any): void {\n    this.sportsService.getLoginCheck().subscribe(checklogin => {\n      if (credentials && checklogin) {\n        const login = checklogin;\n        for (let i = 0; i <= login.length - 1; i++) {\n          if (login[i].username === credentials.username) {\n            this.isLogin = true;\n           // this.router.navigate(['/list']);\n            alert(`${credentials.username} Login Successfully`);\n            this.dispatchAction(credentials, this.isLogin);\n            break;\n          } else {\n            this.isLogin = false;\n          }\n        }\n      }\n      if (this.isLogin === false) {\n        this.dispatchAction(credentials, this.isLogin);\n      }\n    },\n      (error) => {\n        console.log('Error in Fetching Login API');\n      }\n    );\n  }\n\n  dispatchAction(credentials, isLogin?): void {\n    const payload = {\n      username: credentials.username,\n      password: credentials.password\n    };\n    if (isLogin) {\n      this.store.dispatch(new LogInSuccess(payload));\n    } else {\n      this.store.dispatch(new LogInFailure(payload));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 45%;\r\n    margin-left: calc(100vw/3 - 90px)!important;\r\n    margin-top: 100px;\r\n    padding-bottom: 250px;\r\n}\r\n\r\n.form {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n    color: white;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "sportsService",
                        "type": "SportsListService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sportsService",
                        "type": "SportsListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n    <div class=\"login\">\n        <p tabindex=\"0\">Login</p>\n    </div>\n    <div>\n        <form [formGroup]=\"loginForm\" class=\"form\">\n            <label for=\"username\">UserName :</label>\n            <input\n             type=\"text\"\n             formControlName=\"username\"\n             id=\"username\"\n             placeholder=\"Please Enter Name\"\n             aria-label=\"Username\"\n             autocomplete=\"off\"\n            >\n\n            <label for=\"password\">Password :</label>\n            <input\n             type=\"text\"\n             formControlName=\"password\"\n             placeholder=\"Please Enter Password\"\n             aria-label=\"Password\"\n             id=\"password\"\n             autocomplete=\"off\"\n            >\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button\n            type=\"button\"\n            class=\"button\"\n            tabindex=\"0\"\n            (click)=\"onSubmit(loginForm.value)\"\n            [disabled]=\"loginForm.invalid\"\n            aria-label=\"Submit Login Form\"\n        >Submit</button>\n        <button\n            type=\"button\"\n            class=\"button\"\n            tabindex=\"0\"\n            [routerLink]=\"['/list']\"\n            aria-label=\"Move Home Page\"\n        >Cancel</button>\n    </div>\n</div>\n\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-0f0fc598948626fae17a5964ff1725fa",
            "file": "src/app/register-module/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SportsData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "register",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "register",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../store/app.states';\nimport { SignUp } from '../../store/actions/auth.action';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  public registerForm: any;\n  public SportsData: any;\n\n  constructor(private fb: FormBuilder,\n              private store: Store<AppState>\n  ) {\n\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(register: any): void {\n    const payload = {\n      username: register.username,\n      password: register.password\n    };\n    this.store.dispatch(new SignUp(payload));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 45%;\r\n    margin-top: 100px;\r\n    margin-left: calc(100vw/3 - 90px)!important;\r\n    padding-bottom: 250px;\r\n}\r\n\r\n.forms {\r\n    display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n\r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;\r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div2 {\r\n    background: lightseagreen;\r\n}\r\n\r\n*{  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n    font-family: '',\r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: lightseagreen;\r\n    padding: 11px;\r\n    color: white;\r\n}\r\n\r\n",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"grid-container\">\n    <div class=\"login\">\n        <p tabindex=\"0\">Sign up</p>\n    </div>\n    <div>\n        <form [formGroup]=\"registerForm\" class=\"forms\">\n            <label for=\"username\">UserName :</label>\n            <input\n              type=\"text\"\n              formControlName=\"username\"\n              name=\"username\"\n              placeholder=\"Please Enter Name\"\n              autocomplete=\"off\"\n              aria-label=\"User Name\"\n            >\n\n            <label for=\"password\">Password :</label>\n            <input\n             type=\"text\"\n             formControlName=\"password\"\n             name=\"password\"\n             placeholder=\"Please Enter Password\"\n             autocomplete=\"off\"\n             aria-label=\"Password\"\n            >\n        </form>\n    </div>\n    <div class=\"div2\">\n        <button\n         type=\"button\"\n         class=\"button\"\n         tabindex=\"0\"\n         [disabled]=\"registerForm.invalid\"\n         (click)=\"onSubmit(registerForm.value)\"\n         aria-label=\"Add User\"\n        >Add User</button>\n        <button\n         type=\"button\"\n         class=\"button\"\n         tabindex=\"0\"\n         [routerLink]=\"['/list']\"\n         aria-label=\"Move Home Page\"\n        >Cancel</button>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "SportsComponent",
            "id": "component-SportsComponent-ecb4d96aba2d61cce9a620f81fd9891e",
            "file": "src/app/sports/sports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-listing-page",
            "styleUrls": [
                "./sports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginData",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sportsData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableTitle",
                    "defaultValue": "'Sports Club'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addSports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "deleteSports",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "updateSports",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SportsListService } from '../service/mock.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../store/app.states';\nimport { Observable } from 'rxjs';\nimport { ListSports, DeleteSports } from '../store/actions/auth.action';\n\n@Component({\n  selector: 'app-listing-page',\n  templateUrl: './sports.component.html',\n  styleUrls: ['./sports.component.css']\n})\n\nexport class SportsComponent implements OnInit {\n\n  public loginData: Array<any> = [];\n  public sportsData = [];\n  public isAuthenticated: boolean;\n  public tableTitle = 'Sports Club';\n  public errorMessage: string | null;\n  public getState: Observable<any>;\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private store: Store<AppState>,\n              private service: SportsListService ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n\n    this.store.dispatch(new ListSports());\n    this.store.subscribe(data => {\n      if (data && data.sport && data.sport.sports ) {\n        this.sportsData = data.sport.sports;\n        console.log(data);\n      }\n    });\n\n    this.getState.subscribe(isLogin => {\n      this.isAuthenticated = isLogin.isAuthenticated;\n    });\n\n    // this.activatedRoute.params.subscribe(param => {\n    //   this.userLoginStatus = param.term;\n    // },\n    //   (error) => {\n    //     console.log('Error in Fetch Route Parameter');\n    //   }\n    // );\n  }\n\n  updateSports(id: any): void {\n    this.router.navigate(['/addsports', id]);\n  }\n\n  deleteSports(id: any): void {\n    if (window.confirm('Are you sure to delete sport')) {\n      this.store.dispatch(new DeleteSports(id));\n      this.store.dispatch(new ListSports());\n    } else {\n    }\n  }\n\n  addSports(): void {\n    // this.store.dispatch(new ListSports());\n    // this.store.subscribe(data => {\n    //   if (data && data.sport && data.sport.sports) {\n    //     this.sportsData = data.sport.sports;\n    //   }\n    // });\n    this.router.navigate(['/addsports']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\r\n    width: auto;\r\n    margin-top: 25px;\r\n    border: 1px solid black;\r\n}\r\n\r\ntable {\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n}\r\n\r\ntd, th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n    text-align: center;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #dddddd;\r\n}\r\n\r\n.heading {\r\n    color: white;\r\n    margin: 12px;\r\n    padding-left: calc(100vw/2 - 100px)!important;\r\n}\r\n\r\n.button {\r\n    padding: 6px 15px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.add {\r\n    background-color: lightseagreen;\r\n    padding: 9px;\r\n    margin-top: 19px;\r\n}\r\n\r\n.table-bottom {\r\n    display: inline-flex;\r\n}\r\n\r\n.add-button {\r\n    padding: 0px 5px 0px 5px;\r\n    margin: 10px;\r\n    margin-left: 491px;\r\n}\r\n\r\n.crud-button {\r\n   display: inline-flex;\r\n}\r\n\r\n.table {\r\n    border-collapse: inherit;\r\n    width: 100%;\r\n    min-width: 500px;\r\n}\r\n\r\n@media only screen and (max-width: 1002px) {\r\n    .button {\r\n        padding: 8px 3px 8px 3px;\r\n        margin-right: 7px;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 1165px) {\r\n    .heading {\r\n        color: white;\r\n        margin: 12px;\r\n        padding-left: calc(100vw/3 + 1px)!important;\r\n    }\r\n\r\n    .add-button {\r\n        padding: 0px 5px 0px 5px;\r\n        margin: 10px;\r\n        margin-left: calc(100vw/2 - 263px)!important;\r\n    }\r\n}\r\n\r\n.table-header {\r\n    display: inline-flex;\r\n    background-color: lightseagreen;\r\n    width: 100%;\r\n    margin-bottom: 24px;\r\n}\r\n\r\n.scroll {\r\n    overflow: auto;\r\n}\r\n\r\n",
                    "styleUrl": "./sports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "service",
                        "type": "SportsListService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SportsListService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list\">\n    <div class=\"scroll\">\n        <table class=\"table\">\n            <caption>\n               <div class=\"table-header\">\n                 <h2\n                 class=\"heading\"\n                 tabindex=\"0\"\n                >{{tableTitle}}</h2>\n                <button type=\"button\" tabindex=\"0\" aria-label=\"Add Sport\" class=\"add-button\" \n                [disabled]=\"!isAuthenticated\"  (click)=\"addSports()\">Add Sport</button>\n               </div>\n            </caption>\n            <tr>\n                <th tabindex=\"0\">Sr. No.</th>\n                <th tabindex=\"0\">Sports Title</th>\n                <th tabindex=\"0\">Description</th>\n                <th tabindex=\"0\">Category</th>\n                <th tabindex=\"0\" *ngIf=\"isAuthenticated\">Actions</th>\n            </tr>\n            <tr *ngFor=\"let item of sportsData\">\n                <td tabindex=\"0\">{{item.id}}</td>\n                <td tabindex=\"0\">{{item.sportsTitle}}</td>\n                <td tabindex=\"0\">{{item.description}}</td>\n                <td tabindex=\"0\">{{item.category}}</td>\n                <td tabindex=\"0\" *ngIf=\"isAuthenticated\">\n                    <div class=\"crud-button\">\n                        <button type=\"button\" tabindex=\"0\" aria-label=\"Update\"  class=\"button\" (click)=\"updateSports(item.id)\">Update</button>\n                        <button type=\"button\" tabindex=\"0\" aria-label=\"Delete\"  class=\"button\" (click)=\"deleteSports(item.id)\" >Delete</button>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"add\">\n        <footer-element></footer-element>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddSportsComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SportsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModules",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RegisterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Add sport'"
            },
            {
                "name": "ADD_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Add sport success'"
            },
            {
                "name": "addSport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sports/add-sports/addsport.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DELETE_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Delete sport'"
            },
            {
                "name": "DELETE_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Delete sport success'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000',\n  providers: [ { provide: MockService, useClass: SportsListService }]\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000',\n  providers: []\n}"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n}"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] List Success'"
            },
            {
                "name": "LIST_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Fetch sport'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/lit-Elements/heading-element.ts",
                "type": "",
                "defaultValue": "css`white`"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n}"
            },
            {
                "name": "register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/register-module/register/register.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectSportState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "sports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sports/sports.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login.stories.ts",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sports/sports.stories.ts",
                "type": "Story<SportsComponent>",
                "defaultValue": "(args: SportsComponent) => ({\r\n  component: SportsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/register-module/register/register.stories.ts",
                "type": "Story<RegisterComponent>",
                "defaultValue": "(args: RegisterComponent) => ({\r\n  component: RegisterComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sports/add-sports/addsport.stories.ts",
                "type": "Story<AddSportsComponent>",
                "defaultValue": "(args: AddSportsComponent) => ({\r\n  component: AddSportsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_SPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Update sport'"
            },
            {
                "name": "UPDATE_SPORTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Sports] Update sport success'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListSports | ListDataSuccess | AddSports | AddSportsSuccess | UpdateSports | UpdateSportsSuccess | DeleteSports | DeleteSportSuccess",
                "file": "src/app/store/actions/auth.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Sighup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Sighup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Sighup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.action.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "ADD_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Add sport'"
                },
                {
                    "name": "ADD_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Add sport success'"
                },
                {
                    "name": "DELETE_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Delete sport'"
                },
                {
                    "name": "DELETE_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Delete sport success'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] List Success'"
                },
                {
                    "name": "LIST_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Fetch sport'"
                },
                {
                    "name": "UPDATE_SPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Update sport'"
                },
                {
                    "name": "UPDATE_SPORTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Sports] Update sport success'"
                }
            ],
            "src/app/sports/add-sports/addsport.stories.ts": [
                {
                    "name": "addSport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sports/add-sports/addsport.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sports/add-sports/addsport.stories.ts",
                    "type": "Story<AddSportsComponent>",
                    "defaultValue": "(args: AddSportsComponent) => ({\r\n  component: AddSportsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/app.stories.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000',\n  providers: [ { provide: MockService, useClass: SportsListService }]\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000',\n  providers: []\n}"
                }
            ],
            "src/app/header/header.stories.ts": [
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n  sports: [],\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null\r\n}"
                }
            ],
            "src/app/login/login.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login.stories.ts",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/lit-Elements/heading-element.ts": [
                {
                    "name": "mainColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/lit-Elements/heading-element.ts",
                    "type": "",
                    "defaultValue": "css`white`"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    sport: auth.reducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectSportState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/register-module/register/register.stories.ts": [
                {
                    "name": "register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/register-module/register/register.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/register-module/register/register.stories.ts",
                    "type": "Story<RegisterComponent>",
                    "defaultValue": "(args: RegisterComponent) => ({\r\n  component: RegisterComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/sports/sports.stories.ts": [
                {
                    "name": "sports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sports/sports.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sports/sports.stories.ts",
                    "type": "Story<SportsComponent>",
                    "defaultValue": "(args: SportsComponent) => ({\r\n  component: SportsComponent,\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Sighup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Sighup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Sighup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.action.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListSports | ListDataSuccess | AddSports | AddSportsSuccess | UpdateSports | UpdateSportsSuccess | DeleteSports | DeleteSportSuccess",
                    "file": "src/app/store/actions/auth.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "list",
                        "component": "SportsComponent"
                    },
                    {
                        "path": "addsports",
                        "component": "AddSportsComponent"
                    },
                    {
                        "path": "addsports/:id",
                        "component": "AddSportsComponent"
                    },
                    {
                        "path": "registermodule",
                        "loadChildren": "../app/register-module/register-module.module#RegisterModules",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/register-module/register-module-routing.module.ts",
                                        "module": "RegisterModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RegisterComponent",
                                                "canDeactivate": [
                                                    "AuthGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RegisterModules"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "/list",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/footer.element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FooterElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/heading-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderTitleElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-Elements/heading-element.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/register/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/register-module/register/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/mock.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SportsListService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sports.service.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISportsList",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sports.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SportsListService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/add-sports/addsport.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addSport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/add-sports/addsport.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/add-sports/addsports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/sports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/sports.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sports/sports.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSportsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSportSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListSports",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateSports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateSportsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_SPORTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_SPORTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SportState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSportState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Sport",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}